lfdn;v_173
35;the development team got more receptive
41;At least there were some requirements and it was not simply a  build this!  type project where requirements were not well-defined. Some formal requirements are better than none.
75;retrospective highlighted where we could improve and we did 
84;First of all - our customer and our top-managers understand the critical role of business analysts as authors of requirements and they pay more attention to business analysis process.   
106;Changes in requirements happened late into design. Project was able to absorb it without much issues as it was initially budgeted for
120;Lack of reviews
129;Introduced daily backlog grooming sessions with the product owner to get a handle on work scope and MVP.
144;In the first half of my career, I was involved in waterfall development projects. The amount of time it took to elicit, analyze, and document a full software requirements specification was lengthy, no one would actually read the document, and it was outdated by the time it was finished. Changes would constantly happen, and maintaining the spec was time-consuming and costly. 
160;the recognition at management peoples heads, the RE is really useful
167;Key difference: Having competent people on ALL levels.
182;Using use cases and storyboard 
203;In order to avoid being questioned from the customer, sometimes the project engineers modified the values I calculated from DOORS without informing me.
205;We hired full-time BAs
215;changes or modification of requirements during development are hardly transformed into updated test scripts
249;In the past, I didn't know RE was a thing.
278;The requirement engineering itself is immature, but it works. The requirement documents can be the base for designing and for testing.
291;More collaborating with all IT disciplines and other stakeholders.
304;Focussing and accepting roles and processes of Requirements Engineering, evolving from a  jungle  to a strucutre that can cope with INVEST principle
310;I got CPRE-certified
313;Our systems improved to create traceability between requirements, design and test cases.  This gave me confidence that requirements I created were being properly followed through, implemented and verified.
317;Using the problem-oriented requirements SL-07, made everything much easier and more successful.
330;Not involve the development team in sessions of project inception and sprints and backlog planning. Ultimately previous and outsider experiences of using agile methodologies
332;We got help of a local RE & Systems Engineering specialist
364;template for the documentation  people (developers, management etc.) knowing, that writing a documentation is a value for the clients an the (own) company 
370;requirements have been well documented - requirments engineers participate to the solution / development and to the test / qualification of the solution
372;?
377;One key issues is the lack of use of Requirements Management system for detailed Waterfall requirements.  MS Word is the typical weapon of choice which makes maintenance and management of requirements, and incorporation of change requests, very challenging.  We are trying to drive adoption of a tool such as Blueprint that will improve the quality and reusability of requirements, and also deliver greater traceability through to the engineering & development tools.
387;A Problem was - and still is - that anomalies in  the requirements specification are corrected after the test cases have been adapted.
412;Some quality attributes were unknown (reliability). Now we also note requirements for that quality attribute (and others), to make sure we dont miss that when developing functionality (functional requirements).
416;Communication with team and Product owner
429;When the backlog consists of multiple tasks that has requirements that goes against each other. When changes goes to changes to changes without being implemented. Clean backlog is important.
437;High frequency of changes in acceptance testing that made us to work on improving the stakeholder identification and validation techniques
502;The process changed a lot, We started by having zero documentation and it was chaotic. But everything was so fast that we could not afford to spend time writing requirements, it was just code, code, code. We are now in a position where we need to document everything, because the product is bigger and more complex now.
506;change too late
511;Long boring descriptions of processes are replaced with the process models that are much better for workgroups and discussions.
512;changed from waterfall to agile
548;Changes in the process which have been agreed with the customer during retrospectives.
549;Any vagueness or indecision needs to be addressed. Sometimes these are due to unknown costs, external inputs that you don't have full control over. The earlier any vagueness or indecision is addressed - the more satisfied with requirements engineering usually.
569;There are many other projects that have bad analysis documents. In my opinion it is hard to change these once you have some kind of agreement from your stake holders to these artefacts - even if they are bad. If you change the documents after you got your OK from the stakeholders it is likely that you need some kind of them re-evaluated by the stake holders. That takes time and budget. I don't know of any projects who did that. Most are more focused on the software, and once that is running that software artefacts take higher priority. For example a new feature is more likely to get funded than rewriting analysis documents.
573;I was original schooled in SSADM/Waterfall methodologies for project management, as most IT project professionals are. I come to realise that approaches like this are more designed for the protection of IT teams who do not feel comfortable interacting with the business than the actual business benefits. It was not the methodology that accounted for the success of any projects I was involved with but the ability to communicate, build relationships and analyse ambiguous problems. I gained an understanding of the core problems in IT project management (Ref Cobb's Paradox), the fundamental principles that can help (ref Agile manifesto) and the pathology of any number of methodologies that attempt to fix it (including Agile in some cases). I celebrated this year the 21st Birthday of David Wastell's pivotal publication 'The Fetish of Technique: Methodology As A Social Defence'. The IT professional will not learn or understand the importance of the interpersonal skills required for successful project management while it continues to promote methodology over human psychology.    By all means feel free to contact me to discuss any points XXXXX XXXXX
586;focus on user and goal
626;The important aspect is the conversation and collaboration.
676;Not 100% of the objectives are met
683;improve elicitationprocesses, using more techniques that allow to obtain information
684;If the requirements is not correct documented
694;- Can recall one project that due to Time To Market needs needed to re-adjust requirements and we ended up jumping from one Feature to another without making ourselves the time to really understand what we were building.  Of course this project got delayed multiple times
723;Dense communication
729;A greater resource availability of the counterpart was necessary during the stage of survey requirements. In the validation step, they participated some users (client resources), who had not participated in the survey phase, which made them appear some new requirements.
742;We are constantly changing the way that things are done, and adopting new practices where we can. Prototyping and involving the business more frequently was something new for this project team, and improved quality both in terms of software bugs and business objectives. 
754;We did not have dedicated product owner and there were multiple people coming in reviews. We asked client to made one person primary and other as secondary and it helped.
758;Context switching from requirements in one product to another caused some issues. We hence decided to have large seasonal periods dedicated to each product.
774;In some case, experience do causing the problem. Our experienced domain experts get used to work with old technologies, when they describe the business problem they try to solve them in the way they know but it may not the best solution today. Also we need to understand more about the customers, e.g. how easy for them to accept new technology and new way of working. 
786;I have only been working on the project for a week. N/A
825;More understanding and focus on importance of good requirements from non-BA members of the team
830;The project was building on an existing solution. The requirements we started with were of inconsistent quality and accuracy. As part of our project we were able to eliminate these deficiencies.
839;Within the project team, we have good internal communications and support from knowledgeable management, who are connected to the project and our stakeholders.
849;Treat requirements that could not change as an epic/macro and insert and remove stories
851;We review the methodologies and detect practices that were efficient and incorporate them to processes
868;In the past, we used the waterfall model, where the equirements elicitation was a project phase. We only passed to the next stage when this one was closed. This caused a lot of rework, because as time passed, the ideas and needs changed, generating a high rate of change and rework. Currently, we work with the iterative and incremental model, which greatly reduced the rework problem.
870;With the advent of UML tools, software development has become more reliable and stable
879;Confusing and not functional documentation.
896;Many requirements changes in the product delivery
918;Each team working in a way that fits the client's needs, because each client has its peculiarities. In addition, you must also align with the team's satisfaction for the process to work in a more harmoniously way.
921;We avoid making the association between al the requirements and the on-screen prototypes.
926;We identify what it was, in fact, necessary to make clear to guide the development
929;We improved a lot when we stopped looking for a complete requirements elicitation at the beginning of the projects, which generated a lot of frustration from project teams and clients. By working iteratively, value aggregation became the rule.
931;no
945;A greater awareness by the requirements provider (internal client) of the importance of a maximum consideration of the requirements, so that they are formalized with high level of reliability.
948;Changed process towards a more agile approach
952;fill the gap and talk to customer for project requirements.
956;NP
960;.
962;no
968;The ability to create documentation-based planning.
984;Lack of transparency and progress monitoring was mitigated by central tool and roles
985;We decided to go a little quicker RE that adapted to the reality of our project. We use Lean Startup
987;More focus on requirement engineering since starting up phase of project
1006;Because even with flaws, we have still been able to provide an efficient product to the client
1008;Detailed requirements 
1011; It does get a bit strained, when many customer change requests happen in short order or when the customer doesn't know their goals themselves. Sometimes we had to postpone or delay changes due to resource limitations.
1039;The move to SCRUM
1051;Further stakeholder involvement
1062;I do not remember 
1091;Alignments were made which were used within the used methodology that allowed to reach an acceptable level of satisfaction. Nothing more than the continuous improvement of the requirements elicitation process.
1100;Better documentation of requirements. Peer testing.
1118;In the past the practice was more like the waterfall development cycle and nowadays with the quick incremental development cycles, we can adjust directions and capture better the requirements before it is too late.
1126;We formalized and organized the systems development process and we adopted requirements engineering practices for conducting the projects.
1139;Agility.
1140;exchanging project members
1164;NO
1171;yes, meetings with the developers team
1172;NO
1188;Project without documentation of requirements, causing a misalignment between what was delivered by the project and the expectations of the applicants.
1189;No
1194;I do not remember a case.
1200;I don not understand the wording of the question
1220;Yes, we completely changed the methodology after 5 years of post implementation issues because of bad elicitation
1222;yes, reading about the unified software development process
1227;YES, specify the requirements of a problem, with the highest possible quality
1228;NO
1229;Yes, we changed from detailed documentation of requirements but to user stories and from a waterfall methodology for an agile methodology.
1255;team, managers, identify value in the evolution of sound management of product requirements
1266;Meetings, demonstrations, talks and proof of compliance needs.
1283;Improve the detail at which requirements were documented and educate customers to show the value of good requirements management
1289;Perfomance in the team
1296;We started mapping tests to requirements 
1327;We are in a transition phase for changing from waterfall to agile methodology with our customers to reduce the problems of changes in RE. The problem we have is, that with every change you start discussing with the customer is it payable or is it free, how many changes are free etc.
1331;I was not satisfied when we opted for an inadequate development strategy and we had to refactor. The implementation strategy was guided by the requirements analysis.
1339;NO
1343;HIRING PEOPLE with more EXPERIENCE
1344;NO
1348;YES
1350;YES, we perfmor a NEW REQUIREMENTS elicitation (several times)
1351;NO
1353;SI, involve a BUSINESS SPECIALIST
1354;NO
1356;NO
1357;YES, adapt to customer timming and expectations for the PRODUCT
1358;NO
1402;Unsatisfied: Low quality communication from sales team.   Satisfied: Bypassed sales team and went directly to customers for the required information.
1406;-
1411;We chose a more agile approach that fits the environment better.
1413;YES, hire experts in the field
1416;YES, WE APPLY PROCEDURES FOR IMPROVING IN EACH PROJECT
1423;NO
1424;NO
1426;People involved in requirements engineering were not fully dedicated to the project because of resource conflicts. This was reported to company management, who solved the problem by shifting priorities.
1433;NO
1435;YES, DOCUMENT. greater involvement of the PROCESS OWNER
1455;Yes, TRAINING
1457;Yes, generatea FUNCTIONAL document for each function of the APPLICATION WITH THE END USER
1458;NO
1459;THE AMOUNT OF PROBLEMS OR INCIDENT is accepted and the customer is satisfied.
1460;NO
1461;NO
1462;NO
1467;In the past, we have created too much details on the requirements. Too many detail requirements making it hard for the team to understand and maintain.
1474; Na
1484;NO
1485;NO
1487;YES
1526;Better collaboration with customers  Dropping formal requirements documents  Move to Continuous delivery
1620;Yes - I think there is always room for improvement. On the whole though in this context it works quite well. 
1624;none
1650;Fear of change, blame culture, over engineering, small group closed door gathering, poor communication.
1651;In order to get clarity, we would look at the problem / issue by using  Story mapping  techniques to understand the customer needs and then we would do  Spikes  ie. research to remove unknowns in the business or technical requirements. This helps to remove the risk of the work.
1663;The Business Analysts have no idea how the system works and/or what the core requirements are. No ownership of the work.
1667;More reflection of the team on the project at hand.
1668;NO
1669;"YES; CONSTANT TRAINING FOR ENGINEERS."
1670;NO
1675;The management listened to concerns and acted to adjust the business’ expectations of software development. This re-aligned the company with agile development practices. 
1676;my team, DevOps, used to have KanBan and even though it kind of worked, going to sprints really helped us plan and estimate our work better. Despite having  sprints , we're still very KanBan like, but we're better organized and I think that was ultimately better for the team.
1697;We reviewed together the points that were missing, be doing it myself or asking the responsible of that part to do that.
1699;NO
1700;NO
1703;NO
1705;NO
1715;NO
1717;YES, ADAPT DEVELOPMENTS AND CUSTOMER NEEDS WITH RESPECT TO THE PRODUCT.
1723;Yes, hiring new staff, WITH FRESH AND INNOVATIVE IDEAS TO SAVE THE PROBLEM OF THE COMPANY
1727;NO
1741;We stopped using a lot of RUP/UML and went fully agile by implementing SAFe (Scaled Agile Framework).
1742;increased communication
1753;Continous and close collaboration between us and our customer  A better understanding of how to document and communicate requirements in a understandable and measurable way  Effort to test and prove our requirements (all requirements), and to do so in each sprint demo with customer attention
1756;The only major flaw I can recall in the requirements management process from the top of my head was due to the total lack of documentation of the current behavior. That was back when I worked for a software product company. We ended up delivering a solution that did not work for a particular client due to lack of knowledge of our own product. Apart from that, all I can recall were minor problems due to lack of communication (caught way before implementation and easily adjusted).
1759;-
1761;No 
1812;We changed our process to allow small changes but charge for big changes.
1842;The fact that the engineering requirements to be very light, it also means that many of the requirements were vague. To solve the problem assumptions were made that were discussed with the client and later validated by him in demonstration meetings.
1849;Thankfully, since I've been working, I've always been satisfied.
1894;The transition from the focus on internal, departmental, needs, to the external needs, of the clients.
1917;we try to maintain an open mind regarding change and innovation. Every year we question our methods and results and act in order to improve any aspect we see fit.
1918;Changing the process and mobilization of the team to work according to the new method.
1941;Improvement in documentation and passing of information
1957;We abandoned agile and stories.
1963;x
1969;Mostly answered in question 27.  It's one thing to say to people on a project that their requirements elicitation processes are poor.  It's another to provide specific mechanisms that can be used to improve those processes.  As a consultant my role is not only to  develop software , but to aid my customers in any aspect of the process that can be improved.  Because I see poor requirements elicitation as one of the key causes of failure, I have spent a lot of my working career helping organizations to improve in this area.  Sometimes I have been successful and sometimes not.  As the saying goes, I can only show them the door.  I cannot make them go through it.
